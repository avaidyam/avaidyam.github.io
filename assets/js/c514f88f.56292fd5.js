"use strict";(self.webpackChunkAditya_Vaidyam=self.webpackChunkAditya_Vaidyam||[]).push([[391],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(r),y=a,m=u["".concat(p,".").concat(y)]||u[y]||c[y]||o;return r?n.createElement(m,i(i({ref:t},d),{},{components:r})):n.createElement(m,i({ref:t},d))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2405:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={},i="CAPortalLayer",l={permalink:"/blog/2018/02/18/",source:"@site/blog/2018-02-18.md",title:"CAPortalLayer",description:"In the macOS 10.13.4 beta, I spotted a new CALayer class called CAPortalLayer being used in AppKit, and apparently also in UIKit. After looking into it a bit more, it turns out it does exactly what CAPluginLayer did for CGSWindow/NSWindow but for CALayers!",date:"2018-02-18T00:00:00.000Z",formattedDate:"February 18, 2018",tags:[],readingTime:1.385,truncated:!0,authors:[],frontMatter:{},prevItem:{title:"CAStateController & Friends",permalink:"/blog/2018/02/19/"},nextItem:{title:"CAPluginLayer & CABackdropLayer",permalink:"/blog/2018/02/17/"}},p={authorsImageUrls:[]},s=[],d={toc:s};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In the macOS 10.13.4 beta, I spotted a new ",(0,a.kt)("inlineCode",{parentName:"p"},"CALayer")," class called ",(0,a.kt)("inlineCode",{parentName:"p"},"CAPortalLayer")," being used in AppKit, and apparently also in UIKit. After looking into it a bit more, it turns out it does exactly what ",(0,a.kt)("inlineCode",{parentName:"p"},"CAPluginLayer")," did for ",(0,a.kt)("inlineCode",{parentName:"p"},"CGSWindow"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"NSWindow")," but for ",(0,a.kt)("inlineCode",{parentName:"p"},"CALayer"),"s! "),(0,a.kt)("p",null,"I've neglected to provide a screenshot because it really doesn't look like much (it does update in realtime though)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-swift"},"let layer = CAPortalLayer()\nlayer.frame = CGRect(x: 10, y: 10, width: 200, height: 200)\nlayer.sourceLayer = self.view.layer!\n//layer.sourceContextId = 0\n//layer.sourceLayerRenderId = 0\nlayer.hidesSourceLayer = false // try out true as well!\n//layer.matchesOpacity = true // apparently always true\n//layer.matchesPosition = false // apparently always true\n//layer.matchesTransform = true // apparently always true\nself.parentView.layer?.addSublayer(layer)\n")),(0,a.kt)("p",null,"Notice in the code sample, all we needed to do was set ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceLayer")," to an existing valid layer and it worked! There are two more interesting properties here as well: ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceLayerRenderId")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceContextId")," -- it appears that you must set ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceLayerRenderId")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceContextId"),' to matter to the render server (backboardd on iOS and windowserver on macOS). What these properties allow you to do is "portal" a layer from ',(0,a.kt)("strong",{parentName:"p"},"any process whose context you know of")," - just like with ",(0,a.kt)("inlineCode",{parentName:"p"},"CAPluginLayer"),".  Just send the ",(0,a.kt)("inlineCode",{parentName:"p"},"CAContext.contextId")," over the wire from a friendly process and it'll render. Unlike ",(0,a.kt)("inlineCode",{parentName:"p"},"CALayerHost")," et al. however, the originating layer will ",(0,a.kt)("strong",{parentName:"p"},"also")," render on-screen (unless ",(0,a.kt)("inlineCode",{parentName:"p"},"hidesSourceLayer")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"). How do you get the ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceLayerRenderId")," you might ask? Here's the function prototype: ",(0,a.kt)("inlineCode",{parentName:"p"},"NSUInteger CALayerGetRenderId(CALayer *);")," -- it won't be hard."),(0,a.kt)("p",null,"P.S. I originally tested this on iOS using the private ",(0,a.kt)("inlineCode",{parentName:"p"},"_UIPortalView")," class. On macOS, AppKit has ",(0,a.kt)("inlineCode",{parentName:"p"},"NSPortalView")," as well as ",(0,a.kt)("inlineCode",{parentName:"p"},"NSPortalView1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"NSPortalView2")," for some weird reason."))}c.isMDXComponent=!0}}]);